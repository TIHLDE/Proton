// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(true)
  image         String?
  isAdmin       Boolean   @default(false)
  username      String?   @unique

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  memberships   TeamMember[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Team {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String?   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  members   TeamMember[]
  events    TeamEvent[]
  
  @@map("team")
}

model TeamMember {
  id        String   @id @default(cuid())
  role      TeamRole @default(USER)
  userId    String
  teamId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, teamId])
  @@map("team_member")
}

enum TeamRole {
  ADMIN
  USER
}

model TeamEvent {
  id        String   @id @default(cuid())
  teamId    String
  eventType String
  name      String
  startAt   DateTime
  endAt     DateTime?
  isPublic  Boolean  @default(false)
  location  String?
  note      String?
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("team_event")
}

enum TeamEventType {
  TRAINING
  MATCH
  SOCIAL
  OTHER
}
